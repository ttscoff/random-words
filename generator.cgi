#!/usr/bin/env ruby
# frozen_string_literal: true

require 'cgi'
require 'uri'

require 'rubygems'
require 'random-words'

# Main script execution

if __FILE__ == $PROGRAM_NAME
  def param?(param)
    # Returns true if the parameter is present.
    @params.key?(param) && @params[param][0].trueish?
  end

  def markdown_settings(settings)
    base_config = RandomWords::Config.new(:latin).config

    defaults = {
      source: base_config[:source].is_a?(String) ? base_config[:source].to_source : base_config[:source],
      grafs: 10,
      sentences: base_config[:paragraph_length],
      length: base_config[:sentence_length],
      decorate: false,
      link: false,
      ul: false,
      ol: false,
      dl: false,
      bq: false,
      code: false,
      mark: false,
      headers: false,
      table: false,
      extended: false,
      footnote: false,
      hr: false,
      meta_type: nil,
      complete: false,
      style: 'style.css'
    }
    sources = []
    RandomWords::Generator.new(:latin).sources.each { |k, v| sources.concat(v.names.map(&:to_s)) }

    markdown_options = defaults.dup
    settings = settings.split(%r{[,/\|]}).map(&:strip)

    settings.each do |setting|
      case setting
      when /^all$/
        new_options = {
          decorate: true,
          link: true,
          ul: true,
          ol: true,
          dl: true,
          bq: true,
          code: true,
          mark: true,
          headers: true,
          image: true,
          table: true,
          extended: true,
          footnote: true,
          hr: true
        }
        markdown_options.merge!(new_options)
      when Regexp.union(sources)
        markdown_options[:source] = setting.to_source
      when /^\d+$/
        markdown_options[:grafs] = setting.to_i
      when 'dec', 'decorate'
        markdown_options[:decorate] = true
      when 'link'
        markdown_options[:link] = true
      when 'ul'
        markdown_options[:ul] = true
      when 'ol'
        markdown_options[:ol] = true
      when 'dl'
        markdown_options[:dl] = true
      when 'bq', 'blockquote'
        markdown_options[:bq] = true
      when 'code'
        markdown_options[:code] = true
      when 'mark'
        markdown_options[:mark] = true
      when 'header', 'h'
        markdown_options[:headers] = true
      when 'table', 't'
        markdown_options[:table] = true
      when 'short', 's', 'medium', 'med', 'm', 'long', 'l', 'very_long', 'vl'
        markdown_options[:length] = setting.to_length
      when 'x', 'extended'
        markdown_options[:extended] = true
      when 'fn', 'footnotes'
        markdown_options[:footnote] = true
      when 'img', 'image'
        markdown_options[:image] = true
      when 'hr'
        markdown_options[:hr] = true
      when 'comp', 'complete'
        markdown_options[:complete] = true
      when /^(style|css):(.*)$/i
        markdown_options[:style] = Regexp.last_match(2)
      when /^meta:(.*?)$/i
        case Regexp.last_match(1)
        when 'mmd', 'multimarkdown'
          markdown_options[:meta_type] = :multimarkdown
        when 'yaml'
          markdown_options[:meta_type] = :yaml
        end
      else
        markdown_options[:source] = setting.to_source
      end
    end

    markdown_options
  end

  cgi = CGI.new
  args = ENV.fetch('REQUEST_URI', nil)
  args = args.sub(%r{^/md-lipsum/api/4}, '') unless args.nil?
  args = 'all' if args.nil?

  settings = markdown_settings(args)
  @rw.source = settings[:source]
  @rw.sentence_length = settings[:length] || :medium
  @rw.paragraph_length = settings[:sentences] || 5

  @rw.use_extended_punctuation = settings[:extended] ? true : false
  settings[:extended] = @rw.use_extended_punctuation

  @params = cgi.params
  settings[:complete] = true if param?('complete')
  settings[:style] = @params['style'][0] if @params.key?('style')
  # credit = "\n\n<!-- Generated by [md-lipsum](https://brettterpstra.com/md-lipsum/) -->\n"

  settings[:source] = @params['source'][0].to_source if @params.key?('source')

  if param?('html') || param?('preview') || param?('complete')
    if param?('preview')
      print cgi.header('type' => 'text/html', 'expires' => Time.now - 180)
      puts @rw.html(settings)
    else
      print cgi.header('type' => 'text/plain', 'expires' => Time.now - 180)
      puts @rw.html(settings)
    end
  else
    print cgi.header('type' => 'text/plain', 'expires' => Time.now - 180)

    puts @rw.markdown(settings)
  end
end
