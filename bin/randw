#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../lib/random-words"
require "optparse"

# Default options for the script

@options = {
  source: :latin,
  length: :medium,
  paragraph_length: 3,
  count: 1,
  method: nil,
  debug: 0,
  whitespace: true,
  separator: " "
}

markdown_help = <<HELP
                                     dec: add em and strong
                                     link: add links
                                     ul: add unordered lists
                                     ol: add ordered lists
                                     dl: add definition lists
                                     bq: add block quotes
                                     code: add code spans and block
                                     mark: add ==highlights==
                                     headers: add headlines
                                     image: add images
                                     hr: add horizontal rules
                                     table: add tables
                                     fn: add footnotes
                                     complete: complete HTML output
                                     meta:[mmd|yaml]: add metadata header
HELP

OptionParser.new do |opts|
  opts.banner = "Usage: randw [options]"

  opts.separator "OPTIONS:"

  opts.on("-S", "--source SOURCE", "Specify the source language (default: latin)") do |source|
    @options[:source] = source.to_source
  end

  opts.on("-l", "--length LENGTH", "Specify the length of the sentence [short|medium|long|very_long]") do |length|
    @options[:length] = case length
      when /^s/
        :short
      when /^l/
        :long
      when /^v/
        :very_long
      else
        :medium
      end
  end

  opts.on("--graf-length NUMBER", "Specify the number of sentences in a paragraph") do |length|
    @options[:paragraph_length] = length.to_i
  end

  opts.on("--[no-]extended", "Specify whether to use extended punctuation in generated text") do |value|
    @options[:use_extended_punctuation] = value
  end

  opts.separator "GENERATORS:"

  opts.on("-s", "--sentences [NUMBER]", "Generate NUMBER of random sentences (default: 3)") do |number|
    @options[:method] = :sentences
    @options[:count] = number&.to_i || 3
  end

  opts.on("-p", "--paragraphs [NUMBER]", "Generate NUMBER of random paragraphs (default: 3)") do |number|
    @options[:method] = :paragraphs
    @options[:count] = number&.to_i || 3
  end

  opts.on("-w", "--words [NUMBER]", "Generate NUMBER of random words (default: 10)") do |number|
    @options[:method] = :words
    @options[:count] = number&.to_i || 10
  end

  opts.on("-c", "--characters [NUMBER]", "Generate random characters of length (default: 100)") do |number|
    @options[:method] = :characters
    @options[:count] = number&.to_i || 100
  end

  opts.on("-m", "--markdown [SETTINGS]", "Generate random markdown text, comma separated string like \"latin,10,all\"\n#{markdown_help}") do |settings|
    @options[:method] = :markdown
    @options[:markdown_settings] = settings || "latin,10,all"
  end

  opts.on("-H", "--html [SETTINGS]", "Generate random html text, comma separated string like \"latin,10,all\"") do |settings|
    @options[:method] = :html
    @options[:markdown_settings] = settings || "latin,10,all"
  end

  opts.on("--password [LENGTH]", "Generate a random password of LENGTH (default: 20)") do |len|
    @options[:method] = :password
    @options[:count] = len&.to_i || 20
  end

  opts.separator "PASSWORD OPTIONS:"

  opts.on("--separator CHAR", 'Specify the separator character for the password (default: " ")') do |separator|
    @options[:separator] = separator
  end

  opts.on("-n", "--[no-]whitespace", "Specify whether to remove whitespace in generated text (characters only)") do |value|
    @options[:whitespace] = value
  end

  opts.separator "DICTIONARIES:"

  opts.on("--list-dictionaries", "List available dictionaries") do
    @rw = RandomWords::Generator.new(:latin)

    @rw.sources.each do |k, v|
      puts "#{v.name}: #{v.description}"
      puts "triggers: (#{v.names.join(", ")})"
      puts
    end
    Process.exit 0
  end

  opts.on("--create-dictionary [NAME]", "Create a new dictionary") do |name|
    @rw = RandomWords::Generator.new(:latin)
    @rw.create_dictionary(name)
    Process.exit 0
  end

  opts.separator "OTHER OPTIONS:"

  opts.on("-d", "--debug [LEVEL]", "Enable debug mode, 1 displays sentence/word/character counts, 2 displays parts of speech (default 1)") do |level|
    @options[:debug] = true
    @options[:debug_level] = level.to_i || 1
  end

  opts.on("-h", "--help", "Display this help message") do
    puts opts
    exit
  end

  opts.on("-v", "--version", "Display the version") do
    puts "RandomWords v#{RandomWords::VERSION}"
    exit
  end

  opts.on("-t", "--test", "Run the full debug test") do
    @options[:method] = :test
    @options[:debug] = true
  end
end.parse!

def debug(msg)
  return unless @options[:debug]

  # length = msg.length
  # message = RandomWords::Terminal.new.colorize_text(msg, :boldblack)
  # puts RandomWords::Terminal.new.colorize_text('-' * length, :boldblack)
  # puts message
  # puts RandomWords::Terminal.new.colorize_text('-' * length, :boldblack)
  warn RandomWords::Terminal.new.colorize_text(" [#{msg}]", :cyan)
end

def markdown_settings(settings)
  base_config = RandomWords::Config.new(:latin).config

  defaults = {
    source: base_config[:source].is_a?(String) ? base_config[:source].to_source : base_config[:source],
    grafs: 10,
    sentences: base_config[:paragraph_length],
    length: base_config[:sentence_length],
    decorate: false,
    link: false,
    ul: false,
    ol: false,
    dl: false,
    bq: false,
    code: false,
    mark: false,
    headers: false,
    table: false,
    extended: false,
    footnote: false,
    hr: false,
    meta_type: nil,
    complete: false,
    style: "style.css"
  }
  sources = []
  RandomWords::Generator.new(:latin).sources.each { |k, v| sources.concat(v.names.map(&:to_s)) }

  markdown_options = defaults.dup
  settings = settings.split(%r{[,/\|]}).map(&:strip)

  settings.each do |setting|
    case setting
    when /^all$/
      new_options = {
        decorate: true,
        link: true,
        ul: true,
        ol: true,
        dl: true,
        bq: true,
        code: true,
        mark: true,
        headers: true,
        image: true,
        table: true,
        extended: true,
        footnote: true,
        hr: true
      }
      markdown_options.merge!(new_options)
    when Regexp.union(sources)
      markdown_options[:source] = setting.to_source
    when /^\d+$/
      markdown_options[:grafs] = setting.to_i
    when 'dec', 'decorate'
      markdown_options[:decorate] = true
    when 'link'
      markdown_options[:link] = true
    when 'ul'
      markdown_options[:ul] = true
    when 'ol'
      markdown_options[:ol] = true
    when 'dl'
      markdown_options[:dl] = true
    when 'bq', 'blockquote'
      markdown_options[:bq] = true
    when 'code'
      markdown_options[:code] = true
    when 'mark'
      markdown_options[:mark] = true
    when 'header', 'h'
      markdown_options[:headers] = true
    when 'table', 't'
      markdown_options[:table] = true
    when 'short', 's', 'medium', 'med', 'm', 'long', 'l', 'very_long', 'vl'
      markdown_options[:length] = setting.to_length
    when 'x', 'extended'
      markdown_options[:extended] = true
    when 'fn', 'footnotes'
      markdown_options[:footnote] = true
    when 'img', 'image'
      markdown_options[:image] = true
    when 'hr'
      markdown_options[:hr] = true
    when 'comp', 'complete'
      markdown_options[:complete] = true
    when /^(style|css):(.*)$/i
      markdown_options[:style] = Regexp.last_match(2)
    when /^meta:(.*?)$/i
      case Regexp.last_match(1)
      when 'mmd', 'multimarkdown'
        markdown_options[:meta_type] = :multimarkdown
      when 'yaml'
        markdown_options[:meta_type] = :yaml
      end
    else
      markdown_options[:source] = setting.to_source
    end
  end

  markdown_options
end

@rw = RandomWords::Generator.new(@options[:source], { debug: @options[:debug_level] && @options[:debug_level] > 1 })
@rw.sentence_length = @options[:length] || :medium
@rw.paragraph_length = @options[:paragraph_length] || 3
@options[:use_extended_punctuation] = @options[:use_extended_punctuation] ? true : false
@rw.use_extended_punctuation = @options[:use_extended_punctuation] ? true : @rw.config.config[:use_extended_punctuation]

@options[:count] = @options[:count].to_i

case @options[:method]
when :sentences
  total = {
    sentences: @options[:count],
    words: 0,
    characters: 0,
  }
  # @options[:count].times do
  s = @rw.sentences(@options[:count]).join(" ")
  total[:words] += s.split(/ /).count
  total[:characters] += s.length
  print s
  debug "#{s.split(/ /).count}w, #{s.length}c"
  # end
  debug "Total: #{total[:sentences]}s, #{total[:words]}w, #{total[:characters]}c"
when :paragraphs
  total = {
    sentences: 0,
    words: 0,
    characters: 0,
  }
  @options[:count].times do
    p = @rw.paragraph
    total[:sentences] += p.scan(/[?.!]/).count
    total[:words] += p.split(/ /).count
    total[:characters] += p.length
    print p
    debug "#{p.scan(/[?.!]/).count}s, #{p.split(/ /).count}w, #{p.length}c"
    puts "\n\n"
  end
  debug "Total: #{total[:sentences]}s, #{total[:words]}w, #{total[:characters]}c"
when :words
  w = @rw.words(@options[:count])
  print w
  debug "#{w.split(/ /).count}w, #{w.length}c"
when :characters
  c = @rw.characters(@options[:count], whitespace: @options[:whitespace])
  print c
  debug "#{c.split(/ /).count}w, #{c.length}c"
when :markdown, :html
  settings = markdown_settings(@options[:markdown_settings])
  @rw.source = settings[:source]
  @rw.sentence_length = settings[:length] || :medium
  @rw.paragraph_length = settings[:sentences] || 5

  @rw.use_extended_punctuation = settings[:extended] ? true : @options[:use_extended_punctuation]
  settings[:extended] = @rw.use_extended_punctuation

  if @options[:method] == :markdown
    puts @rw.markdown(settings)
  else
    puts @rw.html(settings)
  end
when :password
  p = @rw.characters(20, whitespace: @options[:whitespace])

  m = p.match(/[oleats]/i)
  if m
    num_char = m.begin(0)
    char = m[0].tr("oleats", "013475")
  else
    num_char = p.length
    char = rand(10).to_s
  end
  p[num_char] = char

  cap_char = rand(20)
  cap_char = rand(20) while p[cap_char] !~ /[a-z]/
  p[cap_char] = p[cap_char].upcase

  tail_char = /[^a-z0-9]/i.match?(p) ? "" : %w[! @ # $ % ^ & * ( ) _ + - = ; : < > , . ? /].sample

  print p.gsub(/ /, @options[:separator]) + tail_char
  debug "#{p.split(@options[:separator]).count}w, #{p.length}c"
when :test
  t = RandomWords::Terminal.new(@options[:source])
  t.print_test
else
  puts "Please specify a valid method: sentences, paragraphs, words, or characters."
end
